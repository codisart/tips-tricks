 
stages:
  - test
  - deploy

# ========================== Trigger rules
.master:default:
  rules: &master_rules
    - if: '$CI_COMMIT_REF_NAME == "master" && $CI_PIPELINE_SOURCE != "schedule"'
      when: on_success
    - when: never

.tag:default:
  rules: &tag_only
    - if: '$CI_COMMIT_TAG != null'
      when: on_success
    - when: never

.master-and-merge-request:default:
  rules: &master_and_merge_request
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event"'
      when: never
    - changes:
        - front/**/*
      when: on_success
    - when: never

# ========================== Jobs
back:test:
  stage: test
  image: ruby:2.6.5-stretch
  services:
    - name: postgres:latest
      alias: database        
    - name: elasticsearch:latest
      alias: elastic        
  variables:
    POSTGRES_DB: postgres_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  before_script:
    # Wait for the postgreSQL service to start
    - while ! pg_isready -h"database"; do echo "Try to connect to PostgreSQL ..."; sleep 1; done; echo "Connection to PostgreSQL succeed"
    # Wait for the Elastic Search service to start
    - while [ "$(curl -s http://elastic:9200/_cluster/health | jq ".status" | tr -d '"')" != "green" ]; do echo "Try to connect to ElasticSearch ..."; sleep 1; done; echo "Connection to ElasticSearch succeed"
  script:
    - bundle install
    - bundle exec rails db:migrate RAILS_ENV=test
    - bundle exec rails test

# ========================== Code Quality
front:code_quality:
  stage: quality-control
  needs: []
  rules: *master_only
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - docker pull codeclimate/codeclimate
    - docker run --rm
      --env CODECLIMATE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze
      --format html > analysis.html
  artifacts:
    when: on_success
    paths:
      - analysis.html
    expire_in: 1 hour

# Job to deploy on gitlab pages. should be static html site. "pages" should be the name of the job
pages:
  stage: deploy
  rules: *master_rules
  image: python:alpine
  before_script:
    - pip install nltk==3.4.5
    - pip install mkdocs
  script:
    - cd specs
    - mkdocs build
    - mv site ../public/specs
  artifacts:
    paths:
      - public
  
